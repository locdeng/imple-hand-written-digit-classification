{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOSTm8DVzyXzsDc/H9WpdBC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/locdeng/Algorithm_03/blob/main/Semi_Supervised_Learning.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "MACHINE LEARNING PROJECT\n",
        "\n",
        "Semi-Supervised Learning Practice"
      ],
      "metadata": {
        "id": "i3C588RZVDhZ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kV4sxG6lU8nk"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import torchvision.transforms as transforms\n",
        "from torchvision import models\n",
        "import torch.optim as optim\n",
        "from torch.cuda.amp import autocast, GradScaler\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "import os\n",
        "from PIL import Image\n",
        "import argparse\n",
        "\n",
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, root, transform=None):\n",
        "        self.root = root\n",
        "        self.transform = transform\n",
        "        self.classes = [d for d in os.listdir(root) if not d.startswith('.')]\n",
        "        self.class_to_idx = {c: i for i, c in enumerate(self.classes)}\n",
        "        self.imgs = []\n",
        "        for c in self.classes:\n",
        "            class_dir = os.path.join(root, c)\n",
        "            for filename in os.listdir(class_dir):\n",
        "                path = os.path.join(class_dir, filename)\n",
        "                if os.path.isfile(path):  # Check if the item is a file\n",
        "                    self.imgs.append((path, self.class_to_idx[c]))\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.imgs)\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        path, target = self.imgs[index]\n",
        "        img = Image.open(path).convert('RGB')\n",
        "        if self.transform is not None:\n",
        "            img = self.transform(img)\n",
        "        return img, target\n",
        "\n",
        "class CustomDataset_Nolabel(Dataset):\n",
        "    def __init__(self, root, transform=None):\n",
        "        self.root = root\n",
        "        self.transform = transform\n",
        "        ImageList = os.listdir(root)\n",
        "        self.imgs = []\n",
        "        for filename in ImageList:\n",
        "            path = os.path.join(root, filename)\n",
        "            self.imgs.append(path)\n",
        "    def __len__(self):\n",
        "        return len(self.imgs)\n",
        "    def __getitem__(self, index):\n",
        "        path = self.imgs[index]\n",
        "        img = Image.open(path).convert('RGB')\n",
        "        if self.transform is not None:\n",
        "            img = self.transform(img)\n",
        "        return img\n",
        "\"\"\"\n",
        "class Custom_model(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Custom_model, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1, bias=False)\n",
        "        self.relu = nn.ReLU()\n",
        "        self.maxpool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.flatten = nn.Flatten()\n",
        "        self.fc = nn.Linear(32768, 50)  # Adjust the input size based on the output shape of the last layer\n",
        "        self.softmax = nn.Softmax(dim=1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.maxpool(x)\n",
        "        x = self.flatten(x)\n",
        "        x = self.fc(x)\n",
        "        x = self.softmax(x)\n",
        "        return x\n",
        "\"\"\"\n",
        "\n",
        "\n",
        "class Identity(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Identity, self).__init__()\n",
        "    def forward(self, x):\n",
        "        return x\n",
        "\n",
        "def model_selection(selection):\n",
        "    if selection == \"resnet\":\n",
        "        model = models.resnet18()\n",
        "        model.conv1 =  nn.Conv2d(3, 64, kernel_size=3,stride=1, padding=1, bias=False)\n",
        "        model.layer4 = Identity()\n",
        "        model.fc = nn.Linear(256, 50)\n",
        "    elif selection == \"vgg\":\n",
        "        model = models.vgg11_bn()\n",
        "        model.features = nn.Sequential(*list(model.features.children())[:-7])\n",
        "        model.classifier = nn.Sequential( nn.Linear(in_features=25088, out_features=50, bias=True))\n",
        "    elif selection == \"mobilenet\":\n",
        "        model = models.mobilenet_v2()\n",
        "        model.classifier = nn.Sequential(nn.Linear(in_features=1280, out_features=50, bias=True))\n",
        "    \"\"\"\n",
        "    elif  selection =='custom':\n",
        "        model = Custom_model()\n",
        "    \"\"\"\n",
        "    else:\n",
        "        raise ValueError(\"Invalid model selection\")\n",
        "    return model\n",
        "\n",
        "def cotrain(net1, net2, labeled_loader, unlabeled_loader, optimizer1_1, optimizer1_2, optimizer2_1, optimizer2_2, criterion, scaler):\n",
        "    net1.train()\n",
        "    net2.train()\n",
        "    train_loss = 0\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    k = 0.8\n",
        "\n",
        "    # labeled_training\n",
        "    for batch_idx, (inputs, targets) in enumerate(labeled_loader):\n",
        "        inputs, targets = inputs.cuda(), targets.cuda()\n",
        "        optimizer1_1.zero_grad()\n",
        "        optimizer2_1.zero_grad()\n",
        "\n",
        "        with autocast():\n",
        "            outputs1 = net1(inputs)\n",
        "            loss1 = criterion(outputs1, targets)\n",
        "\n",
        "        scaler.scale(loss1).backward()\n",
        "        scaler.step(optimizer1_1)\n",
        "        scaler.update()\n",
        "\n",
        "        with autocast():\n",
        "            outputs2 = net2(inputs)\n",
        "            loss2 = criterion(outputs2, targets)\n",
        "\n",
        "        scaler.scale(loss2).backward()\n",
        "        scaler.step(optimizer2_1)\n",
        "        scaler.update()\n",
        "\n",
        "        train_loss += loss1.item() + loss2.item()\n",
        "        _, predicted1 = outputs1.max(1)\n",
        "        _, predicted2 = outputs2.max(1)\n",
        "        total += targets.size(0)\n",
        "        correct += (predicted1 == targets).sum().item() + (predicted2 == targets).sum().item()\n",
        "\n",
        "    # unlabeled_training\n",
        "    for batch_idx, inputs in enumerate(unlabeled_loader):\n",
        "        inputs = inputs.cuda()\n",
        "\n",
        "        with autocast():\n",
        "            outputs1 = net1(inputs)\n",
        "            _, predicted1 = outputs1.max(1)\n",
        "\n",
        "        with autocast():\n",
        "            outputs2 = net2(inputs)\n",
        "            _, predicted2 = outputs2.max(1)\n",
        "\n",
        "        agree = predicted1 == predicted2\n",
        "\n",
        "        pseudo_labels = predicted1.clone()\n",
        "        pseudo_labels[agree] = predicted1[agree]\n",
        "\n",
        "        total += pseudo_labels.size(0)\n",
        "        correct += (pseudo_labels == predicted1).sum().item()\n",
        "\n",
        "        optimizer1_2.zero_grad()\n",
        "        with autocast():\n",
        "            outputs1_pseudo = net1(inputs)\n",
        "            loss1_pseudo = criterion(outputs1_pseudo, pseudo_labels)\n",
        "        scaler.scale(loss1_pseudo).backward()\n",
        "        scaler.step(optimizer1_2)\n",
        "        scaler.update()\n",
        "\n",
        "        optimizer2_2.zero_grad()\n",
        "        with autocast():\n",
        "            outputs2_pseudo = net2(inputs)\n",
        "            loss2_pseudo = criterion(outputs2_pseudo, pseudo_labels)\n",
        "        scaler.scale(loss2_pseudo).backward()\n",
        "        scaler.step(optimizer2_2)\n",
        "        scaler.update()\n",
        "\n",
        "        train_loss += loss1_pseudo.item() + loss2_pseudo.item()\n",
        "\n",
        "    return train_loss, correct, total\n",
        "\n",
        "def test(net, testloader):\n",
        "    net.eval()\n",
        "    correct = 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "        for batch_idx, (inputs, targets) in enumerate(testloader):\n",
        "            if torch.cuda.is_available():\n",
        "                inputs, targets = inputs.cuda(), targets.cuda()\n",
        "            outputs = net(inputs)\n",
        "            _, predicted = outputs.max(1)\n",
        "            total += targets.size(0)\n",
        "            correct += predicted.eq(targets).sum().item()\n",
        "        return 100. * correct / total\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "    parser = argparse.ArgumentParser()\n",
        "    parser.add_argument('--test',  type=str,  default='False')\n",
        "    parser.add_argument('--student_abs_path',  type=str,  default='./')\n",
        "    #args = parser.parse_args()\n",
        "    args = parser.parse_known_args()[0]\n",
        "\n",
        "\n",
        "    batch_size = 512   #Input the number of batch size\n",
        "    if args.test == 'False':\n",
        "        train_transform = transforms.Compose([\n",
        "                    transforms.RandomResizedCrop(64, scale=(0.2, 1.0)),\n",
        "                    transforms.RandomHorizontalFlip(),\n",
        "                    transforms.ToTensor(),\n",
        "                    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "                ])\n",
        "        test_transform = transforms.Compose([\n",
        "                    transforms.ToTensor(),\n",
        "                    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "                ])\n",
        "\n",
        "        dataset = CustomDataset(root = './data/Semi-Supervised_Learning/labeled', transform = train_transform)\n",
        "        labeled_loader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True)\n",
        "\n",
        "        dataset = CustomDataset_Nolabel(root = './data/Semi-Supervised_Learning/unlabeled', transform = train_transform)\n",
        "        unlabeled_loader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True)\n",
        "\n",
        "        dataset = CustomDataset(root = './data/Semi-Supervised_Learning/val', transform = test_transform)\n",
        "        val_loader = DataLoader(dataset, batch_size=batch_size, shuffle=False, num_workers=2, pin_memory=True)\n",
        "\n",
        "    else :\n",
        "        test_transform = transforms.Compose([\n",
        "            transforms.ToTensor(),\n",
        "            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n",
        "        ])\n",
        "\n",
        "    if not os.path.exists(os.path.join(args.student_abs_path, 'logs', 'Semi-Supervised_Learning')):\n",
        "        os.makedirs(os.path.join(args.student_abs_path, 'logs', 'Semi-Supervised_Learning'))\n",
        "\n",
        "\n",
        "\n",
        "    model_sel_1 = \"vgg\" #write your choice of model (e.g., 'vgg')\n",
        "    model_sel_2 = \"mobilenet\" #write your choice of model (e.g., 'resnet)\n",
        "\n",
        "\n",
        "    model1 = model_selection(model_sel_1)\n",
        "    model2 = model_selection(model_sel_2)\n",
        "\n",
        "    params_1 = sum(p.numel() for p in model1.parameters() if p.requires_grad) / 1e6\n",
        "    params_2 = sum(p.numel() for p in model2.parameters() if p.requires_grad) / 1e6\n",
        "\n",
        "    if torch.cuda.is_available():\n",
        "        model1 = model1.cuda()\n",
        "    if torch.cuda.is_available():\n",
        "        model2 = model2.cuda()\n",
        "\n",
        "    #You may want to write a loader code that loads the model state to continue the learning process\n",
        "    #Since this learning process may take a while.\n",
        "\n",
        "\n",
        "    if torch.cuda.is_available():\n",
        "        criterion = nn.CrossEntropyLoss().cuda()\n",
        "    else :\n",
        "        criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "\n",
        "    optimizer1_1 = torch.optim.SGD(model1.parameters(), lr=0.01, momentum=0.9) #Optimizer for model 1 in labeled training\n",
        "    optimizer2_1 = torch.optim.Adam(model2.parameters(), lr=0.001)\n",
        "\n",
        "    optimizer1_2 = torch.optim.SGD(model1.parameters(), lr=0.01, momentum=0.9)\n",
        "    optimizer2_2 = torch.optim.Adam(model2.parameters(), lr=0.001)\n",
        "\n",
        "    epoch = 50 #Input the number of epochs\n",
        "\n",
        "\n",
        "    if args.test == 'False':\n",
        "        assert params_1 < 7.0, \"Exceed the limit on the number of model_1 parameters\"\n",
        "        assert params_2 < 7.0, \"Exceed the limit on the number of model_2 parameters\"\n",
        "\n",
        "        best_result_1 = 0\n",
        "        best_result_2 = 0\n",
        "        scaler = GradScaler()\n",
        "\n",
        "        for e in range(0, epoch):\n",
        "            train_loss, correct, total = cotrain(model1, model2, labeled_loader, unlabeled_loader, optimizer1_1, optimizer1_2,\n",
        "                                     optimizer2_1, optimizer2_2, criterion, scaler)\n",
        "            #cotrain(model1, model2, labeled_loader, unlabeled_loader, optimizer1_1, optimizer1_2, optimizer2_1, optimizer2_2, criterion)\n",
        "            tmp_res_1 = test(model1, val_loader)\n",
        "            # You can change the saving strategy, but you can't change file name/path for each model\n",
        "            print (\"[{}th epoch, model_1] ACC : {}\".format(e, tmp_res_1))\n",
        "            if best_result_1 < tmp_res_1:\n",
        "                best_result_1 = tmp_res_1\n",
        "                torch.save(model1.state_dict(),  os.path.join('./logs', 'Semi-Supervised_Learning', 'best_model_1.pt'))\n",
        "\n",
        "            tmp_res_2 = test(model2, val_loader)\n",
        "            # You can change save strategy, but you can't change file name/path for each model\n",
        "            print (\"[{}th epoch, model_2] ACC : {}\".format(e, tmp_res_2))\n",
        "            if best_result_2 < tmp_res_2:\n",
        "                best_result_2 = tmp_res_2\n",
        "                torch.save(model2.state_dict(),  os.path.join('./logs', 'Semi-Supervised_Learning', 'best_model_2.pt'))\n",
        "        print('Final performance {} - {}  // {} - {}', best_result_1, params_1, best_result_2, params_2)\n",
        "\n",
        "\n",
        "    else:\n",
        "        dataset = CustomDataset(root = '/data/23_1_ML_challenge/Semi-Supervised_Learning/test', transform = test_transform)\n",
        "        test_loader = DataLoader(dataset, batch_size=batch_size, shuffle=False, num_workers=2, pin_memory=True)\n",
        "\n",
        "        model1.load_state_dict(torch.load(os.path.join(args.student_abs_path, 'logs', 'Semi-Supervised_Learning', 'best_model_1.pt'), map_location=torch.device('cuda')))\n",
        "        res1 = test(model1, test_loader)\n",
        "\n",
        "        model2.load_state_dict(torch.load(os.path.join(args.student_abs_path, 'logs', 'Semi-Supervised_Learning', 'best_model_2.pt'), map_location=torch.device('cuda')))\n",
        "        res2 = test(model2, test_loader)\n",
        "\n",
        "        if res1>res2:\n",
        "            best_res = res1\n",
        "            best_params = params_1\n",
        "        else :\n",
        "            best_res = res2\n",
        "            best_params = params_2\n",
        "\n",
        "        print(best_res, ' - ', best_params)\n"
      ]
    }
  ]
}